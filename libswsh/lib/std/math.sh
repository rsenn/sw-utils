# $Id: math.in 425 2006-06-16 13:32:51Z roman $
#
# math.sh: Math functions.
#
# ---------------------------------------------------------------------------

#EXPORT=min max avg log10 log2 log1024 exp10 exp2 exp1024 round div is_neg neg not abs idiv shl shr rol bitshift bitrotate ror sqrt sqrt3
#REQUIRE=

# min <integer-values...>
#
# output lowest value
# ---------------------------------------------------------------------------
min()
{
 (min=$1
  shift
  for val; do
    [ "$val" -lt "$min" ] && min=$val
  done
  echo "$min")
}

# max <integer-values...>
#
# output highest value
# ---------------------------------------------------------------------------
max()
{
 (max=$1
  shift
  for val; do
    [ "$val" -gt "$max" ] && max=$val
  done
  echo "$max")
}

# avg <integer-values...>
#
# output the average integer value of the argument list
# ---------------------------------------------------------------------------
avg()
{
 (sum=0
  for val; do
    sum=$((sum + val))
  done
  expr $sum / $#)
}

# log10 <value>
# ---------------------------------------------------------------------------
log10()
{
 (log=0 mul=1
  while [ $((mul * 10)) -le "$1" ]; do
    mul=$((mul * 10))
    log=$((log + 1))
  done
  echo $log)
}

# log2 <integer-value>
# ---------------------------------------------------------------------------
log2()
{
 (log=0 mul=1
  while [ $((mul * 2)) -le "$1" ]; do
    mul=$((mul * 2))
    log=$((log + 1))
  done
  echo $log)
}

# log1024 <integer-value>
# ---------------------------------------------------------------------------
log1024()
{
 (log=0 mul=1
  while :; do
    [ $(( mul * 1024)) -gt "$1" ] && break
    mul=$((mul * 1024))
    log=$((log + 1))
  done
  echo $log)
}

# exp10 <exponent> [base]
# ---------------------------------------------------------------------------
exp10()
{
 (exp=${1-0}
  val=1
  base=${2-1}

  while [ ${exp} -gt 0 ]; do
    val=$((val * 10))
    exp=$((exp - 1))
  done

  expr $val \* $base)
}

# exp2 <exponent> [base]
# ---------------------------------------------------------------------------
exp2()
{
 (exp=${1-0}
  val=1
  base=${2-1}

  while [ ${exp} -gt 0 ]; do
    val=`expr $val \* 2`
    exp=`expr $exp - 1`
  done

  expr $val \* $base)
}

# exp1024 <exponent> [base]
# ---------------------------------------------------------------------------
exp1024()
{
 (exp=${1-0}
  val=1
  base=${2-1}

  while [ ${exp} -gt 0 ]; do
    val=`expr $val \* 1024`
    exp=`expr $exp - 1`
  done

  expr $val \* $base)
}

# round <value> [precision]
# ---------------------------------------------------------------------------
round()
{
  printf "%.${2-0}f\n" ${1-"$1"} | sed 's,\.\?0\+$,,'
}

# div <a> <b>
# ---------------------------------------------------------------------------
div()
{
  echo "$1 / $2" | bc -l | sed 's,\.\?0\+$,,'
}

# ---------------------------------------------------------------------------
is_neg()
{
  test 0 -gt "$1"
}

# ---------------------------------------------------------------------------
neg()
{
  echo "$((-$1))"
}

# ---------------------------------------------------------------------------
not()
{
  echo "$((~$1))"
}

# ---------------------------------------------------------------------------
abs()
{
  is_neg "$1" && neg "$1" || echo "$1"
}

# idiv <a> <b>
# ---------------------------------------------------------------------------
idiv()
{
  echo "$(($1 / $2))"
}

# shl <x> <n>
# ---------------------------------------------------------------------------
shl()
{
  echo $(($1<<$2))
}

# shr <x> <n>
# ---------------------------------------------------------------------------
shr()
{
  echo "$(($1 >> $2))"
}

# rol <x> <n>
# ---------------------------------------------------------------------------
rol()
{
  echo $(( ($1 << ($2 & 31)) | ($1 >> ((32 - $2) & 31)) & 0xffffffff))
}

# expr_bitshift <x> <+/-n>
# ---------------------------------------------------------------------------
bitshift()
{
  local sh='<<' a=`abs "${2:-0}"`
  is_neg "${2:-0}" && sh='>>'
  echo "$(( (${1:-0}) $sh ($a & 31) ))"
}

# expr_bitrotate <x> <+/-n>
# ---------------------------------------------------------------------------
bitrotate()
{
  local ah='<<' ch='>>'
  local a=$(( `abs "${2:-0}"` & 0x1f ))
  local c=$((32 - $a))
  is_neg "${2:-0}" && ah='>>' ch='<<'
  echo "$(( ( (${1:-0}) $ah a ) | ( (${1:-0}) $ch c ) & 0xffffffff))"
}

# ror <x> <n>
# ---------------------------------------------------------------------------
ror()
{
  echo "$(( ($1 >> ($2 & 31)) | ($1 << ((32 - $2) & 31)) & 0xffffffff))"
}

# sqrt <x>
# ---------------------------------------------------------------------------
sqrt()
{
  local x=$1 s=$1 os=0

  while test "$s" != "$os"
  do
    os=$s
    s=$(( (s + x / s) / 2 ))
    msg $s
  done

  echo $s
}

sqrt3()
{
  local x=$1 s=$1 os=0

  while test "$s" != "$os"
  do
    os=$s
    s=$(( (s + x / s / s) / 2 ))
    msg $s
  done

  echo $s
}

# ---[ EOF ]-------------------------------------------------------------------
